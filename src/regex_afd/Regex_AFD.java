/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package regex_afd;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author oskha
 */
public class Regex_AFD extends javax.swing.JFrame {

    /**
     * Creates new form RegexToDFAUI
     */
    public Regex_AFD() {
        initComponents();
        cadenaField.setVisible(false);
        cadenaLabel.setVisible(false);
        cadenaButton.setVisible(false);
    }

    /**
     * This method is called from within the constructor to iniciar the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        regexField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        nodeTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cadenaLabel = new javax.swing.JLabel();
        cadenaField = new javax.swing.JTextField();
        cadenaButton = new javax.swing.JButton();
        checkLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stateTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        statePosTable = new javax.swing.JTable();
        alfabetoLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 389, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ExpresiÃ³n regular:");

        jButton1.setText("Crear AFD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        nodeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nodo", "P. Pos", "U. Pos", "S. Pos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(nodeTable);
        if (nodeTable.getColumnModel().getColumnCount() > 0) {
            nodeTable.getColumnModel().getColumn(0).setHeaderValue("Nodo");
            nodeTable.getColumnModel().getColumn(1).setHeaderValue("P. Pos");
            nodeTable.getColumnModel().getColumn(2).setHeaderValue("U. Pos");
            nodeTable.getColumnModel().getColumn(3).setHeaderValue("S. Pos");
        }

        jLabel2.setText("Alfabeto:");

        cadenaLabel.setText("Cadena a comprobar:");

        cadenaButton.setText("Comprobar");
        cadenaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadenaButtonActionPerformed(evt);
            }
        });

        checkLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        stateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(stateTable);

        statePosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Estados", "Posiciones"
            }
        ));
        jScrollPane3.setViewportView(statePosTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(regexField, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                            .addComponent(alfabetoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cadenaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cadenaField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cadenaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(regexField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(cadenaLabel)
                        .addComponent(cadenaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cadenaButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(alfabetoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(regexField.getText().isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Por favor ingrese una expresion regular");            
        }else{
           try {
                iniciar();
                cadenaField.setVisible(true);
                cadenaLabel.setVisible(true);
                cadenaButton.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Por favor ingrese una expresion regular coherente"); 
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cadenaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadenaButtonActionPerformed
        q0 = crearAFD();
        dfat = new AFDTrans(q0, entrada);
        
        String str=cadenaField.getText();        
        boolean chainCheck = false;
        
        if (!str.isEmpty()){
            String auxStr="";
            for (int i = 0; i < str.length(); i++) {            
                if (str.charAt(i) == '&') {
                    auxStr+="";
                }else{
                    auxStr+=str.charAt(i);
                }
            }
            str=auxStr;  
            if (!str.isEmpty()){               
                for (char c : str.toCharArray()) {
                    if (dfat.setCharacter(c)) {
                        chainCheck = dfat.traverse();
                    }else{
                        chainCheck=false;
                        checkLabel.setText("X");
                        break;
                    }        
                }
            }else{                        
                    if(raiz.left.isNullable()){
                        chainCheck=true;
                    }else{
                        chainCheck=false;
                    }        
                }       
        }else{                        
              chainCheck=false;      
        }       
        if (chainCheck) {
            checkLabel.setText("â");
        } else {
           checkLabel.setText("X");
        }
    }//GEN-LAST:event_cadenaButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Regex_AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Regex_AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Regex_AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Regex_AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Regex_AFD().setVisible(true);
            }
        });
    }
    private   Set<Integer>[] siguientePos;
    private   Nodo raiz;
    private  Set<Estado> EstadosD;

    private   Set<String> entrada;
    private  HashMap<Integer, String> regexChars;
    private String regex;
    private Estado q0;
    private AFDTrans dfat;
    int z;
    public  void iniciar() {
        z=0;
        EstadosD = new HashSet<>();
        entrada = new HashSet<>();
        regex = regexField.getText(); 
        regex="("+regex+")#";  
        
        getSymbols(regex);

        
        ArbolSint st = new ArbolSint(regex);
        raiz = st.getroot(); 
        siguientePos = st.getSiguientePos(); 
        
        
        
        String s[]=new String[regexChars.size()-1];
        for (int i = 1; i < regexChars.size(); i++) {
            s[i-1]=regexChars.get(i) ;    
        }    
        String[] alfabeto = new String[s.length];
        String aux="";
        if(s.length>0){
            alfabeto[0]=s[0];
            z=1;
        }        
        int cont=0;
         for (int i = 1; i < s.length; i++) {
             aux=s[i];
             for (int k= 0; k < i; k++) {            
                 if (aux.equals(s[k])){
                     cont++;
                 }
            }      
            if(cont==0){
                alfabeto[z]=aux;
                z++;
            }
            cont=0;
        }              
                
        
        String alfab="{";
        for (int i = 0; i < z; i++) {            
            if(i<z-1){
               alfab+=(alfabeto[i]+","); 
            }else{
               alfab+=(alfabeto[i]); 
            }            
        }
        alfab+="}\n";
      alfabetoLabel.setText(alfab);
      nodeTable.removeAll();
      DefaultTableModel modelo = new DefaultTableModel();
      modelo.addColumn("Nodo");
      modelo.addColumn("P.Pos");
      modelo.addColumn("U.Pos");
      modelo.addColumn("S.Pos");
      ArrayList<String> nodos = new ArrayList();
      recorridoPostorden(nodos);
      modelo.setRowCount(nodos.size());
      nodeTable.setModel(modelo);
      int row=0;
      int fp=0;
      for (String stw : nodos){
          String[] spl = stw.split("--");
          modelo.setValueAt(spl[0], row, 0);
          modelo.setValueAt(spl[1], row, 1);
          modelo.setValueAt(spl[2], row,2);
          for(String ch : alfabeto){
              try {
                  if(ch.equals(spl[0])){
                  modelo.setValueAt(siguientePos[fp], row,3);
                  fp++;
                  break;
                 }
              } catch (Exception e) {
              }              
          }
          row++;
      }
      jPanel2.removeAll();
      DibujarArbol gui = new DibujarArbol(raiz,jPanel2); 
      q0 = crearAFD();
      dfat = new AFDTrans(q0, entrada);
      TreeMap<Integer,String> allStates = new TreeMap<>();
      for (Estado state : EstadosD) {
        String nextStates = "";
        if(!state.getName().isEmpty()){
            for(int i=0;i<z;i++){
                if(state.getNextStateBySymbol(alfabeto[i]).getName().isEmpty()){
                    nextStates+=" ,";
                }else{
                    nextStates+=state.getNextStateBySymbol(alfabeto[i]).getID()+",";
                }
            }
            allStates.put(state.getID(),nextStates);
        }                       
                    
      }
      stateTable.removeAll();
      DefaultTableModel modelo2 = new DefaultTableModel();
      modelo2.addColumn("Estado");
      for(int i=0;i<z;i++){
            modelo2.addColumn(alfabeto[i]);    
      }      
      modelo2.setRowCount(allStates.size());
      stateTable.setModel(modelo2);  
      
      statePosTable.removeAll();
      DefaultTableModel modelo3 = new DefaultTableModel();
      modelo3.addColumn("Estado");
      modelo3.addColumn("Posiciones");     
      modelo3.setRowCount(allStates.size());
      statePosTable.setModel(modelo3);
      char letrasM[]=new char[26];
      for (int i =0;i<26;i++){
          letrasM[i]=(char) ((char)65+i); 
      }
      int stc=0;
      for (Integer obj : allStates.keySet()) {            
            modelo2.setValueAt(letrasM[obj], stc, 0);
            modelo3.setValueAt(letrasM[obj], stc, 0);
            stc++;
      }   
     
      stc=0;
      for (String obj : allStates.values()) {
            String[] spl = obj.split(",");
            for (int k=0;k<z;k++){
                if (" ".equals(spl[k])){
                    modelo2.setValueAt(" ", stc, k+1);
                }else{
                    modelo2.setValueAt(letrasM[Integer.parseInt(spl[k])], stc, k+1);
                }
                
            }                  
            stc++;            
      }  
      
      for (Estado state : EstadosD) {
        if(!state.getName().isEmpty()){
            modelo3.setValueAt(state.getName(), state.getID(), 1);
        }                       
                    
      }
      
      int posHash = st.getnumOfLeafs();
      for (Estado state : EstadosD) {        
        if(!state.getName().isEmpty()){            
          if(state.getName().contains(posHash)){
             modelo2.setValueAt(modelo2.getValueAt(state.getID(), 0)+"<-",state.getID() , 0);
          }
        }                       
                    
      }
    }
    
    private  void getSymbols(String regex) {
        
        Set<Character> op = new HashSet<>();
        Character[] ch = {'(', ')', '*', '|', '.', '.', '\\', '[', ']', '+', '?'};
        op.addAll(Arrays.asList(ch));

        entrada = new HashSet<>();
        regexChars = new HashMap<>();
        int num = 1;
        for (int i = 0; i < regex.length(); i++) {
            char charAt = regex.charAt(i);
          
            if (op.contains(charAt)) {
                if (i - 1 >= 0 && regex.charAt(i - 1) == '\\') {
                    entrada.add("\\" + charAt);
                    regexChars.put(num++, "\\" + charAt);
                }
            } else {
                if(charAt!='&'){
                    entrada.add("" + charAt);
                    regexChars.put(num++, "" + charAt);
                }
                
            }
        }
    }

    private  Estado crearAFD() {
        int id = 0;
        Set<Integer> firstpos_n0 = raiz.getFirstPos();

        Estado q0 = new Estado();
        q0.setID(id++);
        q0.addAllToName(firstpos_n0);
        if (q0.getName().contains(siguientePos.length)) {
            q0.setAccept();
        }        
        EstadosD.clear();
        EstadosD.add(q0);
        while (true) {
            boolean exit = true;
            Estado s = null;
            for (Estado state : EstadosD) {
                if (!state.getIsMarked()) {
                    exit = false;
                    s = state;
                }
            }
            if (exit) {
                break;
            }

            if (s.getIsMarked()) {
                continue;
            }
            s.setIsMarked(true); //mark the state
            Set<Integer> name = s.getName();
            for (String a : entrada) {
                Set<Integer> U = new HashSet<>();
                for (int p : name) {
                    if (regexChars.get(p).equals(a)) {
                        U.addAll(siguientePos[p - 1]);
                    }
                }
                boolean flag = false;
                Estado tmp = null;
                for (Estado state : EstadosD) {
                    if (state.getName().equals(U)) {
                        tmp = state;
                        flag = true;
                        break;
                    }
                }
                if (!flag) {
                    Estado q = new Estado();
                    if(!U.isEmpty())
                        q.setID(id++);
                    q.addAllToName(U);
                    if (U.contains(siguientePos.length)) {
                        q.setAccept();
                    }
                    EstadosD.add(q);
                    tmp = q;
                }
                s.mueve(a, tmp);
            }
        }        
        return q0;
    }    
    
    public  synchronized void recorridoPostorden(ArrayList<String> nodos)
    {
        ayudantePostorden(raiz,nodos);        
    }
    
    private  void ayudantePostorden(Nodo nodo,ArrayList<String> nodos)
    {
        if( nodo == null )
            return;
        
        ayudantePostorden(nodo.getLeft(),nodos);
        ayudantePostorden(nodo.getRight(),nodos);
        nodos.add(nodo.getSymbol() +"--"+nodo.getFirstPos()+"--"+nodo.getLastPos());
    }
    
    
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alfabetoLabel;
    private javax.swing.JButton cadenaButton;
    private javax.swing.JTextField cadenaField;
    private javax.swing.JLabel cadenaLabel;
    private javax.swing.JLabel checkLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable nodeTable;
    private javax.swing.JTextField regexField;
    private javax.swing.JTable statePosTable;
    private javax.swing.JTable stateTable;
    // End of variables declaration//GEN-END:variables
}
